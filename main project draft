Express and evaluate the following DDL and DML types of SQL commands against your database
in which every relation is populated with 'sufficient' representative tuples: 

//------------------------------------------//
1. Create/Delete/Edit/Display a Location

-- Create
INSERT INTO Locations (Type, Name, Address, City, Province, PostalCode, PhoneNumber, WebAddress, MaxCapacity)
VALUES ('Head', 'Main Sports Complex', '123 Sports Ave', 'Toronto', 'Ontario', 'M5V 3L9', '416-555-1000', 'www.maincomplex.com', 500);

-- Display
SELECT * FROM Locations WHERE Name = 'Main Sports Complex';

-- Edit
UPDATE Locations 
SET MaxCapacity = 550, WebAddress = 'www.maincomplex.ca'
WHERE Name = 'Main Sports Complex';

-- Delete
DELETE FROM Locations WHERE Name = 'Main Sports Complex';

//------------------------------------------//
2. Create/Delete/Edit/Display a Personnel
-- Create
INSERT INTO Personnel (FirstName, LastName, DateOfBirth, SocialSecurityNumber, MedicareCardNumber, PhoneNumber, Address, City, Province, PostalCode, Email, Role, Mandate)
VALUES ('Sarah', 'Johnson', '1985-06-15', '123-456-789', 'MED123456', '416-555-2000', '456 Coach Lane', 'Toronto', 'Ontario', 'M5V 3L1', 's.johnson@sports.com', 'Coach', 'Salaried');

-- Display
SELECT * FROM Personnel WHERE LastName = 'Johnson';

-- Edit
UPDATE Personnel
SET Role = 'Head Coach', Email = 'sarah.johnson@sports.ca'
WHERE LastName = 'Johnson';

-- Delete
DELETE FROM Personnel WHERE LastName = 'Johnson';


//------------------------------------------//
3. Create/Delete/Edit/Display a FamilyMember
-- Create Primary
INSERT INTO FamilyMembers (FirstName, LtName, DateOfBirth, SocialSecurityNumber, MedicareCardNumber, PhoneNumber, Address, City, Province, PostalCode, Email, LocationID)
VALUES ('Michael', 'Smith', '1975-03-22', '987-654-321', 'MED654321', '416-555-3000', '789 Family Rd', 'Toronto', 'Ontario', 'M5V 3L2', 'm.smith@email.com', 1);

-- Create Secondary
INSERT INTO FamilyMembers (FirstName, LastName, DateOfBirth, SocialSecurityNumber, MedicareCardNumber, PhoneNumber, Address, City, Province, PostalCode, Email, LocationID)
VALUES ('Emily', 'Smith', '1978-11-15', '987-654-322', 'MED654322', '416-555-3001', '789 Family Rd', 'Toronto', 'Ontario', 'M5V 3L2', 'e.smith@email.com', 1);

-- Display
SELECT * FROM FamilyMembers WHERE LastName = 'Smith';

-- Edit
UPDATE FamilyMembers
SET PhoneNumber = '416-555-3111'
WHERE LastName = 'Smith' AND FirstName = 'Michael';

-- Delete
DELETE FROM FamilyMembers WHERE LastName = 'Smith';


//------------------------------------------//
4. Create/Delete/Edit/Display a ClubMember
-- Create
INSERT INTO ClubMembers (FirstName, LastName, DateOfBirth, Height, Weight, SocialSecurityNumber, MedicareCardNumber, PhoneNumber, Address, City, Province, PostalCode, FamilyMemberID)
VALUES ('Jacob', 'Smith', '2010-05-10', 150.5, 45.2, '111-222-333', 'MED111222', '416-555-4000', '789 Family Rd', 'Toronto', 'Ontario', 'M5V 3L2', 1);

-- Display
SELECT * FROM ClubMembers WHERE LastName = 'Smith';

-- Edit
UPDATE ClubMembers
SET Height = 155.0, Weight = 48.0
WHERE LastName = 'Smith' AND FirstName = 'Jacob';

-- Delete
DELETE FROM ClubMembers WHERE LastName = 'Smith';


//------------------------------------------//
5. Create/Delete/Edit/Display a TeamFormation

CREATE TABLE TeamFormations (
    FormationID INT PRIMARY KEY AUTO_INCREMENT,
    LocationID INT,
    HeadCoachID INT,
    StartTime DATETIME NOT NULL,
    EndTime DATETIME NOT NULL,
    SessionType ENUM('Training', 'Game') NOT NULL,
    TeamName VARCHAR(100) NOT NULL,
    Score VARCHAR(10),
    FOREIGN KEY (LocationID) REFERENCES Locations(LocationID),
    FOREIGN KEY (HeadCoachID) REFERENCES Personnel(PersonnelID)
);

-- Create
INSERT INTO TeamFormations (LocationID, HeadCoachID, StartTime, EndTime, SessionType, TeamName, Score)
VALUES (1, 1, '2025-03-25 10:00:00', '2025-03-25 12:00:00', 'Training', 'Junior A Team', NULL);

-- Display
SELECT * FROM TeamFormations WHERE TeamName = 'Junior A Team';

-- Edit
UPDATE TeamFormations
SET EndTime = '2025-03-25 12:30:00', SessionType = 'Game'
WHERE TeamName = 'Junior A Team';

-- Delete
DELETE FROM TeamFormations WHERE TeamName = 'Junior A Team';



//------------------------------------------//
6. Assign/Delete/Edit a Club Member to Team Formation
-- Assign
INSERT INTO ClubMemberFormations (ClubMemberID, FormationID, Role)
VALUES (1, 1, 'Forward');

-- Attempt conflicting assignment (will trigger error)
-- First create another formation on same day
INSERT INTO TeamFormations (LocationID, HeadCoachID, StartTime, EndTime, SessionType, TeamName, Score)
VALUES (1, 1, '2025-03-25 11:30:00', '2025-03-25 13:30:00', 'Training', 'Junior B Team', NULL);

-- This will fail due to our trigger
INSERT INTO ClubMemberFormations (ClubMemberID, FormationID, Role)
VALUES (1, 2, 'Defender');

-- Edit role
UPDATE ClubMemberFormations
SET Role = 'Midfielder'
WHERE ClubMemberID = 1 AND FormationID = 1;

-- Delete assignment
DELETE FROM ClubMemberFormations 
WHERE ClubMemberID = 1 AND FormationID = 1;



//------------------------------------------//





7. Get complete details for every location in the system. Details include address, city,
province, postal-code, phone number, web address, type (Head, Branch), capacity,
general manager name, and the number of club members associated with that location.
The results should be displayed sorted in ascending order by province, then by city.

SELECT 
    Locations.LocationID,
    Locations.Name,
    Locations.Address,
    Locations.City,
    Locations.Province,
    Locations.PostalCode,
    Locations.PhoneNumber,
    Locations.WebAddress,
    Locations.Type,
    Locations.MaxCapacity,
    CONCAT(P.FirstName, ' ', P.LastName),
    COUNT(DISTINCT CM.ClubMemberID)
FROM 
    Locations
LEFT JOIN 
    Personnel  ON Locations.LocationID = Personnel.LocationID AND Personnel.Role = 'General Manager'
LEFT JOIN 
    ClubMembers  ON Locations.LocationID = ClubMembers.LocationID
GROUP BY 
    Locations.LocationID, Locations.Name, Locations.Address, Locations.City, Locations.Province, Locations.PostalCode, 
    Locations.PhoneNumber, Locations.WebAddress, Locations.Type, L.MaxCapacity, Personnel.FirstName, Personnel.LastName
ORDER BY 
    Locations.Province ASC, 
    Locations.City ASC;


    


//-------------------------------------------//
8. For a given family member, get details of all the locations that she/he was/is associated
with, the secondary family member and all the club members associated with the
primary family member. Information includes first name, last name and phone number
of the secondary family member, and for every associated club member, the location
name, the club membership number, first-name, last-name, date of birth, Social
Security Number, Medicare card number, telephone number, address, city, province,
postal-code, and relationship with the secondary family member. 



SELECT 
    -- Secondary Family Member Info
    fm2.FirstName,
    fm2.LastName,
    fm2.PhoneNumber,
    
    -- Club Member Info
    cm.ClubMemberID,
    cm.FirstName,
    cm.LastName,
    cm.DateOfBirth,
    cm.SocialSecurityNumber,
    cm.MedicareCardNumber,
    cm.PhoneNumber,
    cm.Address,
    cm.City,
    cm.Province,
    cm.PostalCode,
    
    -- Location Info
    loc.Name AS LocationName,
    
    -- Relationship Info
    fmr.RelationshipType
FROM 
    FamilyMembers fm1
-- Join to find secondary family members (those sharing the same location)
JOIN 
    FamilyMembers fm2 ON fm1.LocationID = fm2.LocationID 
    AND fm2.FamilyMemberID != @primary_family_member_id
-- Join to find club members associated with primary family member
JOIN 
    ClubMembers cm ON cm.FamilyMemberID = fm1.FamilyMemberID
-- Join to get location info
JOIN 
    Locations loc ON fm1.LocationID = loc.LocationID
-- Join to get relationship between secondary family member and club member
LEFT JOIN 
    FamilyMemberRelationships fmr ON fmr.FamilyMemberID = fm2.FamilyMemberID 
    AND fmr.ClubMemberID = cm.ClubMemberID
WHERE 
    fm1.FamilyMemberID = @primary_family_member_id
ORDER BY 
    fm2.LastName, fm2.FirstName, cm.LastName, cm.FirstName;


//--------------------//

9. For a given location and week, get details of all the teamsâ€™ formations recorded in the
system. Details include, head coach first name and last name, start time of the training
or game session, address of the session, nature of the session (training or game), the
teams name, the score (if the session is in the future, then score will be null), and the
first name, last name and role (goalkeeper, defender, etc.) of every player in the team.
Results should be displayed sorted in ascending order by the start day then by the start
time of the session



SELECT 
    -- Session details
    tf.FormationID,
    CONCAT(p.FirstName, ' ', p.LastName) ,
    tf.StartTime,
    l.Address ,
    tf.SessionType,
    tf.TeamName,
    CASE 
        WHEN tf.StartTime > NOW() THEN NULL
        ELSE tf.Score
    END AS Score,
    
    -- Player details
    cm.ClubMemberID,
    cm.FirstName ,
    cm.LastName ,
    cmf.Role 
FROM 
    TeamFormations tf
JOIN 
    Locations l ON tf.LocationID = l.LocationID
JOIN 
    Personnel p ON tf.HeadCoachID = p.PersonnelID
JOIN 
    ClubMemberFormations cmf ON tf.FormationID = cmf.FormationID
JOIN 
    ClubMembers cm ON cmf.ClubMemberID = cm.ClubMemberID
WHERE 
    tf.LocationID = @location_id
    AND DATE(tf.StartTime) BETWEEN @week_start_date AND @week_end_date
ORDER BY 
    DATE(tf.StartTime) ASC,  -- Sort by day first
    tf.StartTime ASC,        -- Then by time within each day
    cm.LastName, cm.FirstName;  -- Then alphabetically by player name



//-------------------------------//
10. Get details of club members who are currently active and have been associated with at
least three different locations and are members for at most three years. Details include
Club membership number, first name and last name. Results should be displayed sorted
in ascending order by club membership number.


SELECT 
    ClubMembers.ClubMemberID,
    ClubMembers.FirstName,
    ClubMembers.LastName 
FROM 
    ClubMembers
WHERE 
    -- Currently active (assuming there's an IsActive flag or similar)
    ClubMembers.IsActive = 1
    
    -- Member for at most 3 years
    AND DATEDIFF(CURRENT_DATE, ClubMembers.JoinDate) <= 365*3
    
    -- Associated with at least 3 different locations
    AND (
        SELECT COUNT(DISTINCT LocationID) 
        FROM ClubMemberLocations 
        WHERE ClubMemberLocations.ClubMemberID = ClubMembers.ClubMemberID
    ) >= 3
ORDER BY 
    cm.ClubMemberID ASC;



//----------------------------------------------------//
11. For a given period of time, give a report on the teamsâ€™ formations for all the locations.
For each location, the report should include the location name, the total number of
training sessions, the total number of players in the training sessions, the total number
of game sessions, the total number of players in the game sessions. Results should only
include locations that have at least two game sessions. Results should be displayed
sorted in descending order by the total number of game sessions. For example, the
period of time could be from Jan. 1st, 2025 to Mar. 31st, 2025.

-- Set the date range parameters (example: Jan 1, 2025 to Mar 31, 2025)
SET @start_date = '2025-01-01';
SET @end_date = '2025-03-31';
SELECT 
    l.LocationID,
    l.Name AS LocationName,
    SUM(CASE WHEN tf.SessionType = 'Training' THEN 1 ELSE 0 END) ,
    SUM(CASE WHEN tf.SessionType = 'Training' THEN player_counts.PlayerCount ELSE 0 END) ,
    SUM(CASE WHEN tf.SessionType = 'Game' THEN 1 ELSE 0 END) ,
    SUM(CASE WHEN tf.SessionType = 'Game' THEN player_counts.PlayerCount ELSE 0 END) 
FROM 
    Locations l
JOIN 
    TeamFormations tf ON l.LocationID = tf.LocationID
LEFT JOIN (
    SELECT 
        FormationID, 
        COUNT(*)  
    FROM 
        ClubMemberFormations 
    GROUP BY 
        FormationID
) player_counts ON tf.FormationID = player_counts.FormationID
WHERE 
    tf.StartTime BETWEEN @start_date AND @end_date
GROUP BY 
    l.LocationID, l.Name
HAVING 
    SUM(CASE WHEN tf.SessionType = 'Game' THEN 1 ELSE 0 END) >= 2
ORDER BY 
    TotalGameSessions DESC;


//------------------------------------------------//
12. Get a report on all active club members who have never been assigned to any formation
team session. The list should include the club memberâ€™s membership number, first
name, last name, age, date of joining the club, phone number, email and current location
name. The results should be displayed sorted in ascending order by location name then
by club membership number. 

SELECT 
    cm.ClubMemberID ,
    cm.FirstName ,
    cm.LastName ,
    TIMESTAMPDIFF(YEAR, cm.DateOfBirth, CURDATE()) ,
    cm.JoinDate ,
    cm.PhoneNumber ,
    cm.Email ,
    loc.Name 
FROM 
    ClubMembers cm
JOIN 
    Locations loc ON cm.LocationID = loc.LocationID
WHERE 
    cm.IsActive = 1  -- Assuming there's an IsActive flag
    AND NOT EXISTS (
        SELECT 1 
        FROM ClubMemberFormations cmf 
        WHERE cmf.ClubMemberID = cm.ClubMemberID
    )
ORDER BY 
    loc.Name ASC,  -- Sort by location name first
    cm.ClubMemberID ASC;  -- Then by membership number

//---------------------------------//
13. Get a report on all active club members who have only been assigned as outside hitter
in all the formation team sessions they have been assigned to. They must be assigned
to at least one formation session as an outside hitter. They should have never been
assigned to any formation session with a role different than outside hitter. The list
should include the club memberâ€™s membership number, first name, last name, age,
phone number, email and current location name. The results should be displayed sorted
in ascending order by location name then by club membership number. 

SELECT 
    cm.ClubMemberID ,
    cm.FirstName ,
    cm.LastName ,
    TIMESTAMPDIFF(YEAR, cm.DateOfBirth, CURDATE()) ,
    cm.PhoneNumber ,
    cm.Email ,
    loc.Name 
FROM 
    ClubMembers cm
JOIN 
    Locations loc ON cm.LocationID = loc.LocationID
WHERE 
    cm.IsActive = 1
    -- Must have at least one assignment as outside hitter
    AND EXISTS (
        SELECT 1 
        FROM ClubMemberFormations cmf 
        WHERE cmf.ClubMemberID = cm.ClubMemberID 
        AND cmf.Role = 'Outside Hitter'
    )
    -- Must have no assignments in any other role
    AND NOT EXISTS (
        SELECT 1 
        FROM ClubMemberFormations cmf 
        WHERE cmf.ClubMemberID = cm.ClubMemberID 
        AND cmf.Role != 'Outside Hitter'
    )
ORDER BY 
    loc.Name ASC,
    cm.ClubMemberID ASC;

//---------------------------------//
14. Get a report on all active club members who have been assigned at least once to every
role throughout all the formation team game sessions. The club member must be
assigned to at least one formation game session as an outside hitter, opposite, setter,
middle blocker, libero, defensive specialist, and serving specialist. The list should
include the club memberâ€™s membership number, first name, last name, age, phone
number, email and current location name. The results should be displayed sorted in
ascending order by location name then by club membership number. 

SELECT 
    cm.ClubMemberID,
    cm.FirstName ,
    cm.LastName ,
    TIMESTAMPDIFF(YEAR, cm.DateOfBirth, CURDATE()) ,
    cm.PhoneNumber ,
    cm.Email ,
    loc.Name 
FROM 
    ClubMembers cm
JOIN 
    Locations loc ON cm.LocationID = loc.LocationID
JOIN 
    ClubMemberFormations cmf ON cm.ClubMemberID = cmf.ClubMemberID
JOIN 
    TeamFormations tf ON cmf.FormationID = tf.FormationID
WHERE 
    cm.IsActive = 1
    AND tf.SessionType = 'Game'
    AND cmf.Role IN ('Outside Hitter', 'Opposite', 'Setter', 'Middle Blocker', 
                   'Libero', 'Defensive Specialist', 'Serving Specialist')
GROUP BY 
    cm.ClubMemberID, cm.FirstName, cm.LastName, cm.DateOfBirth, 
    cm.PhoneNumber, cm.Email, loc.Name
HAVING 
    COUNT(DISTINCT CASE WHEN cmf.Role = 'Outside Hitter' THEN 1 END) >= 1
    AND COUNT(DISTINCT CASE WHEN cmf.Role = 'Opposite' THEN 1 END) >= 1
    AND COUNT(DISTINCT CASE WHEN cmf.Role = 'Setter' THEN 1 END) >= 1
    AND COUNT(DISTINCT CASE WHEN cmf.Role = 'Middle Blocker' THEN 1 END) >= 1
    AND COUNT(DISTINCT CASE WHEN cmf.Role = 'Libero' THEN 1 END) >= 1
    AND COUNT(DISTINCT CASE WHEN cmf.Role = 'Defensive Specialist' THEN 1 END) >= 1
    AND COUNT(DISTINCT CASE WHEN cmf.Role = 'Serving Specialist' THEN 1 END) >= 1
ORDER BY 
    loc.Name ASC,
    cm.ClubMemberID ASC;


//---------------------------------------------//
15. For the given location, get the list of all family members who have currently active
club members associated with them and are also captains for the same location.
Information includes first name, last name, and phone number of the family member.
A family member is considered to be a captain if she/he is assigned as a captain to at
least one team formation session in the same location. 

-- Set the location parameter (replace 1 with your desired location ID)
SET @location_id = 1;

SELECT DISTINCT
    fm.FirstName,
    fm.LastName,
    fm.PhoneNumber
FROM
    FamilyMembers fm
JOIN
    ClubMembers cm ON fm.FamilyMemberID = cm.FamilyMemberID
JOIN
    ClubMemberFormations cmf ON cm.ClubMemberID = cmf.ClubMemberID
JOIN
    TeamFormations tf ON cmf.FormationID = tf.FormationID
JOIN
    Personnel p ON tf.HeadCoachID = p.PersonnelID
WHERE
    cm.IsActive = 1  -- Only active club members
    AND tf.LocationID = @location_id  -- For the specified location
    AND p.Role = 'Captain'  -- Family member is a captain
    AND tf.LocationID = fm.LocationID  -- Captain at same location
ORDER BY
    fm.LastName ASC,
    fm.FirstName ASC;

//----------------------------------------------------//
16. Get a report of all active club members who have never lost a game in which they
played. A club member is considered to win a game if she/he has been assigned to a
game session and is assigned to the team that has a score higher than the score of the
other team. The club member must be assigned to at least one formation game session.
The list should include the club memberâ€™s membership number, first name, last name,
age, phone number, email and current location name. The results should be displayed
sorted in ascending order by location name then by club membership number. 

SELECT 
    cm.ClubMemberID ,
    cm.FirstName ,
    cm.LastName ,
    TIMESTAMPDIFF(YEAR, cm.DateOfBirth, CURDATE()) ,
    cm.PhoneNumber ,
    cm.Email ,
    loc.Name 
FROM 
    ClubMembers cm
JOIN 
    Locations loc ON cm.LocationID = loc.LocationID
WHERE 
    cm.IsActive = 1
    AND EXISTS (
        SELECT 1 
        FROM ClubMemberFormations cmf
        JOIN TeamFormations tf ON cmf.FormationID = tf.FormationID
        WHERE cmf.ClubMemberID = cm.ClubMemberID
        AND tf.SessionType = 'Game'
    )
    AND cm.ClubMemberID NOT IN (
        SELECT DISTINCT cmf.ClubMemberID
        FROM ClubMemberFormations cmf
        JOIN TeamFormations tf ON cmf.FormationID = tf.FormationID
        WHERE tf.SessionType = 'Game'
        AND (
            CAST(SUBSTRING_INDEX(tf.Score, '-', 1) AS UNSIGNED) < 
            CAST(SUBSTRING_INDEX(tf.Score, '-', -1) AS UNSIGNED)
            OR tf.Score IS NULL
        )
    )
ORDER BY 
    loc.Name ASC,
    cm.ClubMemberID ASC;



//---------------------------------------------------------------------//
17. Get a report of all the personnel who were treasurer of the club at least once or is
currently a treasurer of the club. The report should include the treasurerâ€™s first name,
last name, start date as a treasurer and last date as treasurer. If last date as treasurer is
null means that the personnel is the current treasurer of the club. Results should be
displayed sorted in ascending order by first name then by last name then by start date
as a treasurer. 

SELECT 
    p.FirstName,
    p.LastName,
    MIN(pl.StartDate) AS "Start Date ,
    MAX(IFNULL(pl.EndDate, NULL)) ,
    CASE 
        WHEN MAX(IFNULL(pl.EndDate, '9999-12-31')) = '9999-12-31' THEN 'Current Treasurer'
        ELSE 'Former Treasurer'
    END AS "Treasurer Status"
FROM 
    Personnel p
JOIN 
    PersonnelLocations pl ON p.PersonnelID = pl.PersonnelID
WHERE 
    p.Role = 'Treasurer'  -- Assuming 'Treasurer' is a role in your Role enum
    OR EXISTS (
        SELECT 1 
        FROM PersonnelRoles pr  -- Assuming a PersonnelRoles junction table if multiple roles possible
        WHERE pr.PersonnelID = p.PersonnelID
        AND pr.Role = 'Treasurer'
    )
GROUP BY 
    p.PersonnelID, p.FirstName, p.LastName
ORDER BY 
    p.FirstName ASC,
    p.LastName ASC,
    MIN(pl.StartDate) ASC;


//-------------------------------------------------------------//
18. Get a report on all club members who were deactivated by the system because they
became over 18 years old. Results should include the club memberâ€™ first name, last
name, telephone number, email address, deactivation date, last location name and last
role when deactivated. Results should be displayed sorted in ascending order by
location name, then by role, then by first name then by last name. 
