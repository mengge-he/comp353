Express and evaluate the following DDL and DML types of SQL commands against your database
in which every relation is populated with 'sufficient' representative tuples: 

//------------------------------------------//
1. Create/Delete/Edit/Display a Location

-- Create
INSERT INTO Locations (Type, Name, Address, City, Province, PostalCode, PhoneNumber, WebAddress, MaxCapacity)
VALUES ('Head', 'Main Sports Complex', '123 Sports Ave', 'Toronto', 'Ontario', 'M5V 3L9', '416-555-1000', 'www.maincomplex.com', 500);

-- Display
SELECT * FROM Locations WHERE Name = 'Main Sports Complex';

-- Edit
UPDATE Locations 
SET MaxCapacity = 550, WebAddress = 'www.maincomplex.ca'
WHERE Name = 'Main Sports Complex';

-- Delete
DELETE FROM Locations WHERE Name = 'Main Sports Complex';

//------------------------------------------//
2. Create/Delete/Edit/Display a Personnel
-- Create
INSERT INTO Personnel (FirstName, LastName, DateOfBirth, SocialSecurityNumber, MedicareCardNumber, PhoneNumber, Address, City, Province, PostalCode, Email, Role, Mandate)
VALUES ('Sarah', 'Johnson', '1985-06-15', '123-456-789', 'MED123456', '416-555-2000', '456 Coach Lane', 'Toronto', 'Ontario', 'M5V 3L1', 's.johnson@sports.com', 'Coach', 'Salaried');

-- Display
SELECT * FROM Personnel WHERE LastName = 'Johnson';

-- Edit
UPDATE Personnel
SET Role = 'Head Coach', Email = 'sarah.johnson@sports.ca'
WHERE LastName = 'Johnson';

-- Delete
DELETE FROM Personnel WHERE LastName = 'Johnson';


//------------------------------------------//
3. Create/Delete/Edit/Display a FamilyMember
-- Create Primary
INSERT INTO FamilyMembers (FirstName, LastName, DateOfBirth, SocialSecurityNumber, MedicareCardNumber, PhoneNumber, Address, City, Province, PostalCode, Email, LocationID)
VALUES ('Michael', 'Smith', '1975-03-22', '987-654-321', 'MED654321', '416-555-3000', '789 Family Rd', 'Toronto', 'Ontario', 'M5V 3L2', 'm.smith@email.com', 1);

-- Create Secondary
INSERT INTO FamilyMembers (FirstName, LastName, DateOfBirth, SocialSecurityNumber, MedicareCardNumber, PhoneNumber, Address, City, Province, PostalCode, Email, LocationID)
VALUES ('Emily', 'Smith', '1978-11-15', '987-654-322', 'MED654322', '416-555-3001', '789 Family Rd', 'Toronto', 'Ontario', 'M5V 3L2', 'e.smith@email.com', 1);

-- Display
SELECT * FROM FamilyMembers WHERE LastName = 'Smith';

-- Edit
UPDATE FamilyMembers
SET PhoneNumber = '416-555-3111'
WHERE LastName = 'Smith' AND FirstName = 'Michael';

-- Delete
DELETE FROM FamilyMembers WHERE LastName = 'Smith';


//------------------------------------------//
4. Create/Delete/Edit/Display a ClubMember
-- Create
INSERT INTO ClubMembers (FirstName, LastName, DateOfBirth, Height, Weight, SocialSecurityNumber, MedicareCardNumber, PhoneNumber, Address, City, Province, PostalCode, FamilyMemberID)
VALUES ('Jacob', 'Smith', '2010-05-10', 150.5, 45.2, '111-222-333', 'MED111222', '416-555-4000', '789 Family Rd', 'Toronto', 'Ontario', 'M5V 3L2', 1);

-- Display
SELECT * FROM ClubMembers WHERE LastName = 'Smith';

-- Edit
UPDATE ClubMembers
SET Height = 155.0, Weight = 48.0
WHERE LastName = 'Smith' AND FirstName = 'Jacob';

-- Delete
DELETE FROM ClubMembers WHERE LastName = 'Smith';


//------------------------------------------//
5. Create/Delete/Edit/Display a TeamFormation
-- Create
INSERT INTO TeamFormations (LocationID, HeadCoachID, StartTime, EndTime, SessionType, TeamName, Score)
VALUES (1, 1, '2025-03-25 10:00:00', '2025-03-25 12:00:00', 'Training', 'Junior A Team', NULL);

-- Display
SELECT * FROM TeamFormations WHERE TeamName = 'Junior A Team';

-- Edit
UPDATE TeamFormations
SET EndTime = '2025-03-25 12:30:00', SessionType = 'Game'
WHERE TeamName = 'Junior A Team';

-- Delete
DELETE FROM TeamFormations WHERE TeamName = 'Junior A Team';



//------------------------------------------//
6. Assign/Delete/Edit a Club Member to Team Formation
-- Assign
INSERT INTO ClubMemberFormations (ClubMemberID, FormationID, Role)
VALUES (1, 1, 'Forward');

-- Attempt conflicting assignment (will trigger error)
-- First create another formation on same day
INSERT INTO TeamFormations (LocationID, HeadCoachID, StartTime, EndTime, SessionType, TeamName, Score)
VALUES (1, 1, '2025-03-25 11:30:00', '2025-03-25 13:30:00', 'Training', 'Junior B Team', NULL);

-- This will fail due to our trigger
INSERT INTO ClubMemberFormations (ClubMemberID, FormationID, Role)
VALUES (1, 2, 'Defender');

-- Edit role
UPDATE ClubMemberFormations
SET Role = 'Midfielder'
WHERE ClubMemberID = 1 AND FormationID = 1;

-- Delete assignment
DELETE FROM ClubMemberFormations 
WHERE ClubMemberID = 1 AND FormationID = 1;



//------------------------------------------//





7. Get complete details for every location in the system. Details include address, city,
province, postal-code, phone number, web address, type (Head, Branch), capacity,
general manager name, and the number of club members associated with that location.
The results should be displayed sorted in ascending order by province, then by city.

SELECT 
    L.LocationID,
    L.Name AS LocationName,
    L.Address,
    L.City,
    L.Province,
    L.PostalCode,
    L.PhoneNumber,
    L.WebAddress,
    L.Type AS LocationType,
    L.MaxCapacity AS Capacity,
    CONCAT(P.FirstName, ' ', P.LastName) AS GeneralManagerName,
    COUNT(DISTINCT CM.ClubMemberID) AS NumberOfClubMembers
FROM 
    Locations L
LEFT JOIN 
    Personnel P ON L.LocationID = P.LocationID AND P.Role = 'General Manager'
LEFT JOIN 
    ClubMembers CM ON L.LocationID = CM.LocationID
GROUP BY 
    L.LocationID, L.Name, L.Address, L.City, L.Province, L.PostalCode, 
    L.PhoneNumber, L.WebAddress, L.Type, L.MaxCapacity, P.FirstName, P.LastName
ORDER BY 
    L.Province ASC, 
    L.City ASC;



//-------------------------------------------//
8. For a given family member, get details of all the locations that she/he was/is associated
with, the secondary family member and all the club members associated with the
primary family member. Information includes first name, last name and phone number
of the secondary family member, and for every associated club member, the location
name, the club membership number, first-name, last-name, date of birth, Social
Security Number, Medicare card number, telephone number, address, city, province,
postal-code, and relationship with the secondary family member. 


SET @primary_family_member_id = 1;

SELECT 
    -- Secondary Family Member Info
    fm2.FirstName AS SecondaryFirstName,
    fm2.LastName AS SecondaryLastName,
    fm2.PhoneNumber AS SecondaryPhoneNumber,
    
    -- Club Member Info
    cm.ClubMemberID AS MembershipNumber,
    cm.FirstName AS ClubMemberFirstName,
    cm.LastName AS ClubMemberLastName,
    cm.DateOfBirth,
    cm.SocialSecurityNumber,
    cm.MedicareCardNumber,
    cm.PhoneNumber AS ClubMemberPhone,
    cm.Address,
    cm.City,
    cm.Province,
    cm.PostalCode,
    
    -- Location Info
    loc.Name AS LocationName,
    
    -- Relationship Info
    fmr.RelationshipType
FROM 
    FamilyMembers fm1
-- Join to find secondary family members (those sharing the same location)
JOIN 
    FamilyMembers fm2 ON fm1.LocationID = fm2.LocationID 
    AND fm2.FamilyMemberID != @primary_family_member_id
-- Join to find club members associated with primary family member
JOIN 
    ClubMembers cm ON cm.FamilyMemberID = fm1.FamilyMemberID
-- Join to get location info
JOIN 
    Locations loc ON fm1.LocationID = loc.LocationID
-- Join to get relationship between secondary family member and club member
LEFT JOIN 
    FamilyMemberRelationships fmr ON fmr.FamilyMemberID = fm2.FamilyMemberID 
    AND fmr.ClubMemberID = cm.ClubMemberID
WHERE 
    fm1.FamilyMemberID = @primary_family_member_id
ORDER BY 
    fm2.LastName, fm2.FirstName, cm.LastName, cm.FirstName;


//--------------------//

9. For a given location and week, get details of all the teamsâ€™ formations recorded in the
system. Details include, head coach first name and last name, start time of the training
or game session, address of the session, nature of the session (training or game), the
teams name, the score (if the session is in the future, then score will be null), and the
first name, last name and role (goalkeeper, defender, etc.) of every player in the team.
Results should be displayed sorted in ascending order by the start day then by the start
time of the session


-- Parameters (replace with actual values)
SET @location_id = 1;                      -- The location ID you're interested in
SET @week_start_date = '2025-03-24';       -- Start date of the week (Monday)
SET @week_end_date = '2025-03-30';         -- End date of the week (Sunday)

SELECT 
    -- Session details
    tf.FormationID,
    CONCAT(p.FirstName, ' ', p.LastName) AS HeadCoach,
    tf.StartTime,
    l.Address AS SessionAddress,
    tf.SessionType,
    tf.TeamName,
    CASE 
        WHEN tf.StartTime > NOW() THEN NULL
        ELSE tf.Score
    END AS Score,
    
    -- Player details
    cm.ClubMemberID,
    cm.FirstName AS PlayerFirstName,
    cm.LastName AS PlayerLastName,
    cmf.Role AS PlayerRole
FROM 
    TeamFormations tf
JOIN 
    Locations l ON tf.LocationID = l.LocationID
JOIN 
    Personnel p ON tf.HeadCoachID = p.PersonnelID
JOIN 
    ClubMemberFormations cmf ON tf.FormationID = cmf.FormationID
JOIN 
    ClubMembers cm ON cmf.ClubMemberID = cm.ClubMemberID
WHERE 
    tf.LocationID = @location_id
    AND DATE(tf.StartTime) BETWEEN @week_start_date AND @week_end_date
ORDER BY 
    DATE(tf.StartTime) ASC,  -- Sort by day first
    tf.StartTime ASC,        -- Then by time within each day
    cm.LastName, cm.FirstName;  -- Then alphabetically by player name
